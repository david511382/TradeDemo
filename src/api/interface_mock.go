// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/api/interface.go

// Package api is a generated GoMock package.
package api

import (
	reflect "reflect"
	reqs "zerologix-homework/src/server/reqs"
	resp "zerologix-homework/src/server/resp"

	gomock "github.com/golang/mock/gomock"
)

// MockIOrder is a mock of IOrder interface.
type MockIOrder struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderMockRecorder
}

// MockIOrderMockRecorder is the mock recorder for MockIOrder.
type MockIOrderMockRecorder struct {
	mock *MockIOrder
}

// NewMockIOrder creates a new mock instance.
func NewMockIOrder(ctrl *gomock.Controller) *MockIOrder {
	mock := &MockIOrder{ctrl: ctrl}
	mock.recorder = &MockIOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrder) EXPECT() *MockIOrderMockRecorder {
	return m.recorder
}

// PostBuy mocks base method.
func (m *MockIOrder) PostBuy(req *reqs.OrderPostBuy) (resp.OrderPostBuy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBuy", req)
	ret0, _ := ret[0].(resp.OrderPostBuy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBuy indicates an expected call of PostBuy.
func (mr *MockIOrderMockRecorder) PostBuy(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBuy", reflect.TypeOf((*MockIOrder)(nil).PostBuy), req)
}

// PostSell mocks base method.
func (m *MockIOrder) PostSell(req *reqs.OrderPostSell) (resp.OrderPostSell, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostSell", req)
	ret0, _ := ret[0].(resp.OrderPostSell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostSell indicates an expected call of PostSell.
func (mr *MockIOrderMockRecorder) PostSell(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSell", reflect.TypeOf((*MockIOrder)(nil).PostSell), req)
}

// PostTest mocks base method.
func (m *MockIOrder) PostTest(req *reqs.OrderPostTest) (resp.OrderPostTest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostTest", req)
	ret0, _ := ret[0].(resp.OrderPostTest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostTest indicates an expected call of PostTest.
func (mr *MockIOrderMockRecorder) PostTest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostTest", reflect.TypeOf((*MockIOrder)(nil).PostTest), req)
}

// MockIMatchOrder is a mock of IMatchOrder interface.
type MockIMatchOrder struct {
	ctrl     *gomock.Controller
	recorder *MockIMatchOrderMockRecorder
}

// MockIMatchOrderMockRecorder is the mock recorder for MockIMatchOrder.
type MockIMatchOrderMockRecorder struct {
	mock *MockIMatchOrder
}

// NewMockIMatchOrder creates a new mock instance.
func NewMockIMatchOrder(ctrl *gomock.Controller) *MockIMatchOrder {
	mock := &MockIMatchOrder{ctrl: ctrl}
	mock.recorder = &MockIMatchOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMatchOrder) EXPECT() *MockIMatchOrderMockRecorder {
	return m.recorder
}

// Match mocks base method.
func (m *MockIMatchOrder) Match(price float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", price)
	ret0, _ := ret[0].(error)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockIMatchOrderMockRecorder) Match(price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockIMatchOrder)(nil).Match), price)
}
